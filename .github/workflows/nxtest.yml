---
# name: 'Default Test'

# #Reusable workflow with input parameters to choose a type of test
# on:
#   workflow_call:
#     inputs:
#       test:
#         description: 'Type of test being run'
#         required: true
#         type: string
#       testtype:
#         description: 'Type of test (lint, build, test)'
#         required: false
#         type: string

# jobs:
#   build:
#     name: Generate cache
#     runs-on: ubuntu-latest
#     steps:
#         #Checking out to the develop branch
#       - name: Checkout develop
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0

#         #Generates the hashes for the comparison between the origin branch and the upstream development branch
#       - name: Derive appropriate SHAs for base and head for `nx affected` commands
#         uses: nrwl/nx-set-shas@v2
#         with:
#           main-branch-name: 'develop'

#         #Installs node.js
#       - name: Use Node.js 16
#         uses: actions/setup-node@v2
#         with:
#           node-version: '16'

#         #installs yarn
#       - name: Install yarn
#         run: npm install yarn -g

#       - name: Cache Yarn Packages
#         id: cache-yarn-packages
#         uses: actions/cache@v2
#         with:
#           path: ~/.cache
#           key: yarn-packages-${{ hashFiles('**/yarn.lock') }}

#         #installs the yarn lockfile
#       - name: Install packages
#         # run: yarn install --frozen-lockfile
#         run: |
#           cd aerial-mapping
#           yarn install --frozen-lockfile

#       - name: Lint test affected
#         if: inputs.testtype == 'lint' && inputs.test == 'affected'
#         # run: yarn nx affected:lint --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
#         run: |
#           cd aerial-mapping
#           yarn nx affected:lint --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} 

#       - name: Build test affected
#         if: inputs.testtype == 'build' && inputs.test == 'affected'
#         # run: yarn nx affected:build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
#         run: |
#           cd aerial-mapping
#           yarn nx affected:build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

#       - name: Unit test affected
#         if: inputs.testtype == 'unit' && inputs.test == 'affected'
#         # run: yarn nx affected:test --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
#         run: |
#           cd aerial-mapping
#           yarn nx affected:test --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

#       - name: E2E test affected
#         if: inputs.testtype == 'e2e' && inputs.test == 'affected'
#         # run: yarn nx affected:e2e --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
#         run: |
#           cd aerial-mapping
#           yarn nx affected:e2e --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}

#         #run tests on the entire repository
#       - name: Test all
#         if: inputs.testtype == 'unit'
#         run: |
#           cd aerial-mapping
#           yarn nx run-many --target=test --all --skip-nx-cache --parallel --coverage
#         # run: |
#         #   yarn nx run-many --target=lint --all --skip-nx-cache --parallel
#         #   yarn nx run-many --target=build --all --skip-nx-cache --parallel
#         #   yarn nx run-many --target=test --all --skip-nx-cache --parallel --coverage
#         #   yarn nx run-many --target=e2e --all --skip-nx-cache --parallel --coverage

#       - uses: codecov/codecov-action@v2
#         if: inputs.testtype == 'unit'
#         with:
#           # Organization codecov token to be placed below
#           token: ${{ secrets.CODECOV_TOKEN }}
#           directory: ./coverage

name: 'Amplify Deploy'
on: [push]

jobs:
  test:
    name: test amplify-cli-action
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
    - uses: actions/checkout@v1

    - name: use node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: configure amplify
      uses: ambientlight/amplify-cli-action@0.3.0
      with:
        amplify_command: configure
        amplify_env: prod
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1

    - name: install, build and test
      run: |
        npm install
        # build and test
        # npm run build
        # npm run test
    
    - name: deploy
      uses: ambientlight/amplify-cli-action@0.3.0
      with:
        amplify_command: publish
        amplify_env: prod
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1

    - name: CodeCov
      uses: codecov/codecov-action@v2
      if: inputs.testtype == 'unit'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage