// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID         Int              @id @unique @default(autoincrement())
  user_email     String           @unique
  user_password  String
  user_name      String
  user_surname   String
  user_role      String
  user_approved  Boolean          @default(false)
  Flight_Details Flight_Details[]
}

model Video {
  videoID          Int      @id @unique @default(autoincrement())
  filmed_date_time DateTime
  file_location    String   @db.VarChar(45)
  Images           Images[]
}

model Images {
  imageID       Int    @id @unique @default(autoincrement())
  videoID       Int
  video         Video  @relation(fields: [videoID], references: [videoID])
  file_location String @db.VarChar(45)
  imagescol     String @db.VarChar(45)
}

model Flight_Details {
  flightID      Int    @id @unique @default(autoincrement())
  flight_height String @db.VarChar(45)
  flight_type   String @db.VarChar(45)
  pilotID       Int
  pilot         User   @relation(fields: [pilotID], references: [userID])
}

model Game_Park {
  parkID        Int    @id @default(autoincrement())
  park_name     String @db.VarChar(45)
  park_location String @db.VarChar(45)
  park_address  String @db.VarChar(45)

  Video_Collection Video_Collection[]
}

model Video_Collection {
  collectionID     Int       @id @default(autoincrement())
  parkID           Int
  Game_Park        Game_Park @relation(fields: [parkID], references: [parkID])
  upload_date_time DateTime  @default(now())
}

model Video_In_Collection {
  collectionID Int
  videoID      Int
  video_order  Int

  @@id([collectionID, videoID])
  @@unique([collectionID, videoID, video_order])
}
